---
apiVersion: v1
kind: Service
metadata:
  name: secrethub-core
  namespace: secrethub
  labels:
    app: secrethub-core
    component: core
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
    - port: 4000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: secrethub-core
    component: core
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: secrethub-core
  namespace: secrethub
  labels:
    app: secrethub-core
    component: core
    version: v0.1.0
spec:
  serviceName: secrethub-core
  replicas: 3
  podManagementPolicy: Parallel  # Start all pods at once for faster startup
  selector:
    matchLabels:
      app: secrethub-core
      component: core
  template:
    metadata:
      labels:
        app: secrethub-core
        component: core
        version: v0.1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/metrics"
    spec:
      # Service account for AWS IAM role authentication (IRSA)
      serviceAccountName: secrethub-core

      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Pod anti-affinity - spread pods across different nodes
      affinity:
        podAntiAffinity:
          # Prefer to not schedule on same node (soft constraint)
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - secrethub-core
                topologyKey: kubernetes.io/hostname
          # Never schedule on same node in production (hard constraint)
          # Uncomment for production with >= 3 nodes
          # requiredDuringSchedulingIgnoredDuringExecution:
          #   - labelSelector:
          #       matchExpressions:
          #         - key: app
          #           operator: In
          #           values:
          #             - secrethub-core
          #     topologyKey: kubernetes.io/hostname

        # Prefer different availability zones
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - secrethub-core
                topologyKey: topology.kubernetes.io/zone

      # Init containers
      initContainers:
        # Wait for PostgreSQL to be ready
        - name: wait-for-postgres
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z -v -w30 $POSTGRES_HOST $POSTGRES_PORT; do
                echo "Waiting for PostgreSQL at $POSTGRES_HOST:$POSTGRES_PORT..."
                sleep 5
              done
          env:
            - name: POSTGRES_HOST
              valueFrom:
                configMapKeyRef:
                  name: secrethub-config
                  key: postgres_host
            - name: POSTGRES_PORT
              valueFrom:
                configMapKeyRef:
                  name: secrethub-config
                  key: postgres_port

      # Main container
      containers:
        - name: secrethub-core
          image: secrethub/core:v0.1.0
          imagePullPolicy: IfNotPresent

          ports:
            - name: http
              containerPort: 4000
              protocol: TCP

          # Environment variables
          env:
            - name: PHX_HOST
              value: "secrethub-core.secrethub.svc.cluster.local"
            - name: PHX_PORT
              value: "4000"
            - name: MIX_ENV
              value: "prod"
            - name: RELEASE_NODE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: RELEASE_DISTRIBUTION
              value: "name"
            - name: RELEASE_COOKIE
              valueFrom:
                secretKeyRef:
                  name: secrethub-secrets
                  key: erlang_cookie
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: secrethub-secrets
                  key: secret_key_base
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: secrethub-secrets
                  key: database_url
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: secrethub-config
                  key: redis_url
            # AWS KMS configuration for auto-unseal
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: secrethub-config
                  key: aws_region
                  optional: true
            # Enable auto-unseal
            - name: AUTO_UNSEAL_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: secrethub-config
                  key: auto_unseal_enabled
                  optional: true

          # Resource limits and requests
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "2000m"

          # Liveness probe - restart if process is dead
          livenessProbe:
            httpGet:
              path: /v1/sys/health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          # Readiness probe - remove from load balancer if not ready
          readinessProbe:
            httpGet:
              path: /v1/sys/health/ready
              port: http
            initialDelaySeconds: 10
              periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1

          # Startup probe - allow time for initialization/unsealing
          startupProbe:
            httpGet:
              path: /v1/sys/health/live
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 30  # 150 seconds total
            successThreshold: 1

          # Lifecycle hooks
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 15  # Allow time for graceful shutdown

          # Security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL

          # Volume mounts
          volumeMounts:
            - name: data
              mountPath: /app/data
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /app/config
              readOnly: true

      # Volumes
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: secrethub-config

      # Termination grace period for graceful shutdown
      terminationGracePeriodSeconds: 30

      # DNS configuration
      dnsPolicy: ClusterFirst

      # Restart policy
      restartPolicy: Always

  # Volume claim templates
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: secrethub-core
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: gp3  # AWS EBS gp3 (change based on cloud provider)
        resources:
          requests:
            storage: 10Gi
---
# Service Account for IRSA (IAM Roles for Service Accounts)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrethub-core
  namespace: secrethub
  annotations:
    # AWS IAM role for auto-unseal KMS access
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/secrethub-core-role
---
# Pod Disruption Budget - ensure at least 2 pods available during disruptions
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: secrethub-core-pdb
  namespace: secrethub
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: secrethub-core
      component: core
