---
# LoadBalancer Service for external access to SecretHub Core
apiVersion: v1
kind: Service
metadata:
  name: secrethub-lb
  namespace: secrethub
  labels:
    app: secrethub-core
    component: loadbalancer
  annotations:
    # AWS Load Balancer Controller annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # Network Load Balancer
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"

    # Health check configuration
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/v1/sys/health/ready"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "4000"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "2"

    # TLS configuration (requires ACM certificate)
    # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:123456789012:certificate/..."
    # service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"

    # Connection draining
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-timeout: "30"

    # Access logging (requires S3 bucket)
    # service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    # service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "my-lb-logs"
    # service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "secrethub"

spec:
  type: LoadBalancer
  sessionAffinity: ClientIP  # Sticky sessions for WebSocket connections
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours

  ports:
    - name: http
      port: 80
      targetPort: 4000
      protocol: TCP
    # Uncomment for HTTPS with ACM certificate
    # - name: https
    #   port: 443
    #   targetPort: 4000
    #   protocol: TCP

  selector:
    app: secrethub-core
    component: core

  # Preserve client source IP
  externalTrafficPolicy: Local
---
# Ingress (alternative to LoadBalancer)
# Uncomment if using ingress controller instead of LoadBalancer
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: secrethub-ingress
#   namespace: secrethub
#   annotations:
#     kubernetes.io/ingress.class: "nginx"
#     cert-manager.io/cluster-issuer: "letsencrypt-prod"
#     nginx.ingress.kubernetes.io/ssl-redirect: "true"
#     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#     nginx.ingress.kubernetes.io/proxy-body-size: "10m"
#     nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
#     nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
#     nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
#     # WebSocket support
#     nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
#     nginx.ingress.kubernetes.io/proxy-set-headers: |
#       Upgrade $http_upgrade
#       Connection "upgrade"
# spec:
#   tls:
#     - hosts:
#         - secrethub.example.com
#       secretName: secrethub-tls
#   rules:
#     - host: secrethub.example.com
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: secrethub-core
#                 port:
#                   number: 4000
